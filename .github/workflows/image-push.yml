name: Create and publish a Docker image
permissions:
  contents: read         # Needed to check out the repository
  packages: write        # Needed to push images to GitHub Container Registry (ghcr.io)

on:
  push:
    branches: [ master ]
    tags:
    - "v*.*.*"

jobs:
  build-image:
    name: Build Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64, linux/arm/v7]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ github.repository_owner }}/instance-manager,ghcr.io/${{ github.repository_owner }}/instance-manager
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.created={{date 'ISO8601'}}
            org.opencontainers.image.version={{version}}
            
      - name: Build for ${{ matrix.platform }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ matrix.platform }}
          push: false
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          outputs: type=image,name=docker.io/${{ github.repository_owner }}/instance-manager,push-by-digest=true,name-canonical=true,push=false
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            CREATED=$(date -u +'%Y-%m-%dT%H:%M:%SZ')
            VERSION=${{ github.ref_name }}

  merge-and-push:
    name: Merge and Push
    runs-on: ubuntu-latest
    needs: build-image
    permissions:
      contents: read
      packages: write
      attestations: write  # For generating attestations
      id-token: write      # For OIDC token authentication
    if: github.event_name != 'pull_request'
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Docker metadata
        id: metadata
        uses: docker/metadata-action@v5
        with:
          images: docker.io/${{ github.repository_owner }}/instance-manager,ghcr.io/${{ github.repository_owner }}/instance-manager
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
          labels: |
            org.opencontainers.image.created={{date 'ISO8601'}}
            org.opencontainers.image.version={{version}}
            
      - name: Create manifest list and push
        id: push
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}

      - name: Generate artifact attestation (dockerhub)
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: docker.io/${{ github.repository_owner }}/instance-manager
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Generate artifact attestation (ghcr)
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/instance-manager
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
