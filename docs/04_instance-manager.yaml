---
apiVersion: v1
kind: Namespace
metadata:
  name: instance-manager
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.4
  creationTimestamp: null
  name: instancegroups.instancemgr.keikoproj.io
spec:
  additionalPrinterColumns:
  - JSONPath: .status.currentState
    description: current state of the instancegroup
    name: State
    type: string
  - JSONPath: .status.currentMin
    description: currently set min instancegroup size
    name: Min
    type: integer
  - JSONPath: .status.currentMax
    description: currently set max instancegroup size
    name: Max
    type: integer
  - JSONPath: .status.activeScalingGroupName
    description: instancegroup created scalinggroup name
    name: Group Name
    type: string
  - JSONPath: .spec.provisioner
    description: instance group provisioner
    name: Provisioner
    type: string
  - JSONPath: .spec.strategy.type
    description: instance group upgrade strategy
    name: Strategy
    type: string
  - JSONPath: .status.lifecycle
    description: instance group lifecycle spot/normal
    name: Lifecycle
    type: string
  - JSONPath: .metadata.creationTimestamp
    description: time passed since instancegroup creation
    name: Age
    type: date
  group: instancemgr.keikoproj.io
  names:
    kind: InstanceGroup
    listKind: InstanceGroupList
    plural: instancegroups
    shortNames:
    - ig
    singular: instancegroup
  scope: Namespaced
  subresources: {}
  validation:
    openAPIV3Schema:
      description: InstanceGroup is the Schema for the instancegroups API
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: InstanceGroupSpec defines the schema of resource Spec
          properties:
            eks-cf:
              properties:
                configuration:
                  description: EKSCFConfiguration defines the context of an AWS Instance
                    Group using EKSCF
                  properties:
                    bootstrapArguments:
                      type: string
                    clusterName:
                      type: string
                    image:
                      type: string
                    instanceProfileName:
                      type: string
                    instanceType:
                      type: string
                    keyPairName:
                      type: string
                    managedPolicies:
                      items:
                        type: string
                      type: array
                    metricsCollection:
                      items:
                        type: string
                      type: array
                    roleName:
                      type: string
                    securityGroups:
                      items:
                        type: string
                      type: array
                    spotPrice:
                      type: string
                    subnets:
                      items:
                        type: string
                      type: array
                    tags:
                      items:
                        additionalProperties:
                          type: string
                        type: object
                      type: array
                    volSize:
                      format: int32
                      type: integer
                  type: object
                maxSize:
                  format: int32
                  type: integer
                minSize:
                  format: int32
                  type: integer
              type: object
            eks-managed:
              properties:
                configuration:
                  properties:
                    amiType:
                      type: string
                    clusterName:
                      type: string
                    instanceType:
                      type: string
                    keyPairName:
                      type: string
                    nodeLabels:
                      additionalProperties:
                        type: string
                      type: object
                    nodeRole:
                      type: string
                    releaseVersion:
                      type: string
                    securityGroups:
                      items:
                        type: string
                      type: array
                    subnets:
                      items:
                        type: string
                      type: array
                    tags:
                      items:
                        additionalProperties:
                          type: string
                        type: object
                      type: array
                    version:
                      type: string
                    volSize:
                      format: int64
                      type: integer
                  type: object
                maxSize:
                  format: int64
                  type: integer
                minSize:
                  format: int64
                  type: integer
              required:
              - configuration
              - maxSize
              - minSize
              type: object
            provisioner:
              type: string
            strategy:
              description: AwsUpgradeStrategy defines the upgrade strategy of an AWS
                Instance Group
              properties:
                crd:
                  properties:
                    concurrencyPolicy:
                      type: string
                    crdName:
                      type: string
                    spec:
                      type: string
                    statusFailureString:
                      type: string
                    statusJSONPath:
                      type: string
                    statusSuccessString:
                      type: string
                  type: object
                rollingUpdate:
                  properties:
                    maxBatchSize:
                      type: integer
                    minInstancesInService:
                      type: integer
                    minSuccessfulInstancesPercent:
                      type: integer
                    pauseTime:
                      type: string
                    suspendProcesses:
                      items:
                        type: string
                      type: array
                    waitOnResourceSignals:
                      type: boolean
                  type: object
                type:
                  type: string
              required:
              - type
              type: object
          required:
          - provisioner
          - strategy
          type: object
        status:
          description: InstanceGroupStatus defines the schema of resource Status
          properties:
            activeLaunchConfigurationName:
              type: string
            activeScalingGroupName:
              type: string
            currentMax:
              type: integer
            currentMin:
              type: integer
            currentState:
              type: string
            lifecycle:
              type: string
            nodesInstanceRoleArn:
              type: string
            stackName:
              type: string
            strategyResourceName:
              type: string
            usingSpotRecommendation:
              type: boolean
          type: object
      required:
      - metadata
      - spec
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: instance-manager
  namespace: instance-manager
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  creationTimestamp: null
  name: instance-manager
rules:
# < ...
# This is only needed for if you are using one of these projects for CRD Strategy, you may replaces this with a different RBAC
- apiGroups:
  - argoproj.io
  - upgrademgr.keikoproj.io
  resources:
  - workflows
  - rollingupgrades
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
# This is only needed for if you are using one of these projects for CRD Strategy, you may replaces this with a different RBAC
# ... >
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - get
  - list
  - watch
  - create
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - instancemgr.keikoproj.io
  resources:
  - instancegroups
  verbs:
  - get
  - list
  - watch
  - create
  - update
  - patch
  - delete
- apiGroups:
  - instancemgr.keikoproj.io
  resources:
  - instancegroups/status
  verbs:
  - get
  - update
  - patch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: instance-manager
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: instance-manager
subjects:
- kind: ServiceAccount
  name: instance-manager
  namespace: instance-manager
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: instance-manager
  namespace: instance-manager
data:
  controller.conf: |
    foo: bar
  cloudformation.template: |
    AWSTemplateFormatVersion: '2010-09-09'
    Description: 'Amazon EKS - Node Group - Released 2018-08-30'
    Parameters:
      KeyName:
        Description: The EC2 Key Pair to allow SSH access to the instances
        Type: AWS::EC2::KeyPair::KeyName
      NodeImageId:
        Type: AWS::EC2::Image::Id
        Description: AMI id for the node instances.
      NodeInstanceType:
        Description: EC2 instance type for the node instances
        Type: String
        Default: t2.medium
        AllowedValues:
        - t2.small
        - t2.medium
        - t2.large
        - t2.xlarge
        - t2.2xlarge
        - m3.medium
        - m3.large
        - m3.xlarge
        - m3.2xlarge
        - m4.large
        - m4.xlarge
        - m4.2xlarge
        - m4.4xlarge
        - m4.10xlarge
        - m5.large
        - m5.xlarge
        - m5.2xlarge
        - m5.4xlarge
        - m5.12xlarge
        - m5.24xlarge
        - c4.large
        - c4.xlarge
        - c4.2xlarge
        - c4.4xlarge
        - c4.8xlarge
        - c5.large
        - c5.xlarge
        - c5.2xlarge
        - c5.4xlarge
        - c5.9xlarge
        - c5.18xlarge
        - i3.large
        - i3.xlarge
        - i3.2xlarge
        - i3.4xlarge
        - i3.8xlarge
        - i3.16xlarge
        - r3.xlarge
        - r3.2xlarge
        - r3.4xlarge
        - r3.8xlarge
        - r4.large
        - r4.xlarge
        - r4.2xlarge
        - r4.4xlarge
        - r4.8xlarge
        - r4.16xlarge
        - x1.16xlarge
        - x1.32xlarge
        - p2.xlarge
        - p2.8xlarge
        - p2.16xlarge
        - p3.2xlarge
        - p3.8xlarge
        - p3.16xlarge
        ConstraintDescription: Must be a valid EC2 instance type
      NodeAutoScalingGroupMinSize:
        Type: Number
        Description: Minimum size of Node Group ASG.
        Default: 1
      NodeAutoScalingGroupMaxSize:
        Type: Number
        Description: Maximum size of Node Group ASG.
        Default: 3
      NodeVolumeSize:
        Type: Number
        Description: Node volume size
        Default: 20
      ClusterName:
        Description: The cluster name provided when the cluster was created. If it is incorrect, nodes will not be able to join the cluster.
        Type: String
      BootstrapArguments:
        Description: Arguments to pass to the bootstrap script. See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
        Default: ""
        Type: String
      NodeGroupName:
        Description: Unique identifier for the Node Group.
        Type: String
      NodeSecurityGroups:
        Description: The security groups to attach to the scaling group
        Type: List<AWS::EC2::SecurityGroup::Id>
      VpcId:
        Description: The VPC of the worker instances
        Type: AWS::EC2::VPC::Id
      Subnets:
        Description: The subnets where workers can be created.
        Type: List<AWS::EC2::Subnet::Id>
      ManagedPolicyARNs:
        Description: List of Managed IAM Policy ARNs to be attached to instance groups
        Type: List<String>
      NodeAutoScalingGroupMetrics:
        Description: The Metrics that an Amazon EC2 ASG sends to Amazon CloudWatch.
        Type: List<String>
      ExistingRoleName:
        Description: Optional - an existing iam role name to use for bootstrapping
        Type: String
        Default: ""
      ExistingInstanceProfileName:
        Description: Optional - an existing iam instance profile name to use for bootstrapping
        Type: String
        Default: ""
    Metadata:
      AWS::CloudFormation::Interface:
        ParameterGroups:
          -
            Label:
              default: "EKS Cluster"
            Parameters:
              - ClusterName
              - NodeSecurityGroups
          -
            Label:
              default: "Worker Node Configuration"
            Parameters:
              - NodeGroupName
              - NodeAutoScalingGroupMinSize
              - NodeAutoScalingGroupMaxSize
              - NodeInstanceType
              - NodeImageId
              - NodeVolumeSize
              - KeyName
              - BootstrapArguments
              - ManagedPolicyARNs
              - NodeAutoScalingGroupMetrics
          -
            Label:
              default: "Worker Network Configuration"
            Parameters:
              - VpcId
              - Subnets
    Resources:

      {{if not .Spec.EKSCFSpec.EKSCFConfiguration.ExistingRoleName}}
      NodeInstanceRole:
        Type: AWS::IAM::Role
        Properties:
          AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
            - Effect: Allow
              Principal:
                Service:
                - ec2.amazonaws.com
              Action:
              - sts:AssumeRole
          Path: "/"
          ManagedPolicyArns: !Ref ManagedPolicyARNs
      NodeInstanceProfile:
        Type: AWS::IAM::InstanceProfile
        Properties:
          Path: "/"
          Roles:
          - !Ref NodeInstanceRole
      {{end}}

      NodeGroup:
        Type: AWS::AutoScaling::AutoScalingGroup
        Properties:
          DesiredCapacity: !Ref NodeAutoScalingGroupMinSize
          LaunchConfigurationName: !Ref NodeLaunchConfig
          MinSize: !Ref NodeAutoScalingGroupMinSize
          MaxSize: !Ref NodeAutoScalingGroupMaxSize
          VPCZoneIdentifier:
            !Ref Subnets
          Tags:
          - Key: Name
            Value: !Sub "${ClusterName}-${NodeGroupName}-Node"
            PropagateAtLaunch: 'true'
          - Key: !Sub 'kubernetes.io/cluster/${ClusterName}'
            Value: 'owned'
            PropagateAtLaunch: 'true'
          - Key: KubernetesCluster
            Value: !Ref ClusterName
            PropagateAtLaunch: 'true'
          {{if .Spec.EKSCFSpec.EKSCFConfiguration.MetricsCollection}}
          MetricsCollection:
          {{$metrics := index .Spec.EKSCFSpec.EKSCFConfiguration.MetricsCollection 0}}
          {{if (eq $metrics "all")}}
          - Granularity: "1Minute"
          {{else}}
          - Metrics:
              !Ref NodeAutoScalingGroupMetrics
            Granularity: "1Minute"
          {{end}}
          {{end}}
        {{$strategy := .Spec.AwsUpgradeStrategy.Type | ToLower}}
        {{if (eq $strategy "rollingupdate")}}
        UpdatePolicy:
          AutoScalingRollingUpdate:
            MinInstancesInService: {{.Spec.AwsUpgradeStrategy.RollingUpgradeType.MinInstancesInService}}
            MaxBatchSize: {{.Spec.AwsUpgradeStrategy.RollingUpgradeType.MaxBatchSize}}
            WaitOnResourceSignals: {{.Spec.AwsUpgradeStrategy.RollingUpgradeType.WaitOnResourceSignals}}
            {{if (ne .Spec.AwsUpgradeStrategy.RollingUpgradeType.MinSuccessfulInstancesPercent 0)}}
            MinSuccessfulInstancesPercent: {{.Spec.AwsUpgradeStrategy.RollingUpgradeType.MinSuccessfulInstancesPercent}}{{end}}
            PauseTime: {{.Spec.AwsUpgradeStrategy.RollingUpgradeType.PauseTime}}
            {{ $processes := len .Spec.AwsUpgradeStrategy.RollingUpgradeType.SuspendProcesses }}{{if (ne $processes 0)}}
            SuspendProcesses:
              {{range .Spec.AwsUpgradeStrategy.RollingUpgradeType.SuspendProcesses}}- {{.}}
              {{end}}
            {{end}}
        {{end}}
      NodeLaunchConfig:
        Type: AWS::AutoScaling::LaunchConfiguration
        Properties:
          AssociatePublicIpAddress: 'false'
          {{if not .Spec.EKSCFSpec.EKSCFConfiguration.ExistingRoleName}}
          IamInstanceProfile: !Ref NodeInstanceProfile
          {{else}}
          IamInstanceProfile: !Ref ExistingInstanceProfileName
          {{end}}
          ImageId: !Ref NodeImageId
          InstanceType: !Ref NodeInstanceType
          KeyName: !Ref KeyName
          {{$spotPrice := .Spec.EKSCFSpec.EKSCFConfiguration.SpotPrice}}
          {{if (ne $spotPrice "")}}
          SpotPrice: {{$spotPrice}}
          {{end}}
          SecurityGroups: !Ref NodeSecurityGroups
          BlockDeviceMappings:
            - DeviceName: /dev/xvda
              Ebs:
                VolumeSize: !Ref NodeVolumeSize
                VolumeType: gp2
                DeleteOnTermination: true
          UserData:
            Fn::Base64:
              !Sub |
                #!/bin/bash
                set -o xtrace
                /etc/eks/bootstrap.sh ${ClusterName} ${BootstrapArguments}
                /opt/aws/bin/cfn-signal --exit-code $? \
                        --stack  ${AWS::StackName} \
                        --resource NodeGroup  \
                        --region ${AWS::Region}
    Outputs:
      NodeInstanceRole:
        Description: The node instance role
        {{if not .Spec.EKSCFSpec.EKSCFConfiguration.ExistingRoleName}}
        Value: !GetAtt NodeInstanceRole.Arn
        {{else}}
        Value: !Join
          - ''
          - - 'arn:aws:iam::'
            - !Ref 'AWS::AccountId'
            - ":role/"
            - !Ref ExistingRoleName
        {{end}}
      AsgName:
        Description: The ASG name
        Value: !Ref NodeGroup
      LaunchConfigName:
        Description: The launch config name
        Value: !Ref NodeLaunchConfig

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: instance-manager
  name: instance-manager
  namespace: instance-manager
spec:
  replicas: 1
  selector:
    matchLabels:
      app: instance-manager
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: instance-manager
    spec:
      containers:
      - image: keikoproj/instance-manager:master
        imagePullPolicy: Always
        name: instance-manager
        resources:
          limits:
            cpu: 100m
            memory: 300Mi
          requests:
            cpu: 100m
            memory: 300Mi
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: ssl-certs
          mountPath: /etc/ssl/certs/ca-certificates.crt
          readOnly: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      serviceAccount: instance-manager
      serviceAccountName: instance-manager
      volumes:
        - name: ssl-certs
          hostPath:
            path: /etc/ssl/certs/ca-bundle.crt
        - name: config-volume
          configMap:
            name: instance-manager
